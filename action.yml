# @todo add step to install php


# https://api.github.com/repos/silverstripe/silverstripe-framework/branches


GITHUB_REPOSITORY=silverstripe/silverstripe-framework

# -H "Authorization: Bearer ${{ github.token }}" \

# The minimum cms major with commercial support
MINIMUM_CMS_MAJOR=4

# Get the default branch from GitHub API
# We need to make an API call rather than just assume that the current branch is the default
# because this workflow may be triggered by workflow_dispatch on any branch
RESP_CODE=$(curl -w %{http_code} -s -o __base.json \
-X GET "https://api.github.com/repos/${GITHUB_REPOSITORY} \
-H "Accept: application/vnd.github+json" \
-H "X-GitHub-Api-Version: 2022-11-28" \
)
if [[ $RESP_CODE != "200" ]]; then
  echo "Unable to read list of tags - HTTP response code was $RESP_CODE"
  exit 1
fi

# Gets all tags from GitHub API
# https://docs.github.com/en/rest/git/tags?apiVersion=2022-11-28
RESP_CODE=$(curl -w %{http_code} -s -o __tags.json \
-X GET "https://api.github.com/repos/${GITHUB_REPOSITORY}/tags?per_page=100" \
-H "Accept: application/vnd.github+json" \
-H "X-GitHub-Api-Version: 2022-11-28" \
)
if [[ $RESP_CODE != "200" ]]; then
  echo "Unable to read list of tags - HTTP response code was $RESP_CODE"
  exit 1
fi

# Gets all branches from GitHub API
# https://docs.github.com/en/rest/branches/branches?apiVersion=2022-11-28#list-branches
RESP_CODE=$(curl -w %{http_code} -s -o __branches.json \
-X GET "https://api.github.com/repos/${GITHUB_REPOSITORY}/branches?per_page=100" \
-H "Accept: application/vnd.github+json" \
-H "X-GitHub-Api-Version: 2022-11-28" \
)
if [[ $RESP_CODE != "200" ]]; then
  echo "Unable to read list of tags - HTTP response code was $RESP_CODE"
  exit 1
fi

DEFAULT_BRANCH=$(jq -r .default_branch __base.json)

if [[ $DEFAULT_BRANCH != $GITHUB_BASE_REF ]]; then
  echo "Current branch $GITHUB_BASE_REF is not the same as default branch $DEFAULT_BRANCH"
  exit 1
fi

MINIMUM_CMS_MAJOR=$MINIMUM_CMS_MAJOR DEFAULT_BRANCH=$DEFAULT_BRANCH php versions.php

# # Filter on `m` and `m.n` style branches
# BRANCHES=$(jq -r '.[].name' __response.json | grep -Po '^[0-9]+\.?[0-9]*$' | sort -V -r)
# for BRANCH in "$BRANCHES"; do
#   echo "$BRANCH"
# done
